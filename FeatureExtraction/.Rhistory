q()
library(sparklyr)
library(nycflights13)
library(dplyr)
library(ggplot2)
sc = spark_connect(master="local")
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
spark_install(version = "2.0.0")
spark_disconnect(sc)
sc = spark_connect(master="local")
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
library(sparklyr)
library(nycflights13)
library(dplyr)
library(ggplot2)
sc = spark_connect(master="local")
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
spark_disconnect(sc)
sc = spark_connect(master="local", spark_home = Sys.getenv("SPARK_HOME"))
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(sparklyr)
library(nycflights13)
library(dplyr)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(sparklyr)
rm(list = ls())
setwd(".")
sc <- spark_connect(master="local")
flights_r <- copy_to(sc, flights, "flights_sc", overwrite = TRUE)
sparkConf = list(spark.driver.memory = "2g", spark.sql.warehouse.dir="C:/tmp")
spark_disconnect(sc)
sparkConf = list(spark.driver.memory = "2g", spark.sql.warehouse.dir="C:/tmp")
sc <- spark_connect(master="local", config =  sparkConf)
flights_r <- copy_to(sc, flights, "flights_sc", overwrite = TRUE)
flights_r <- copy_to(sc, flights, "flights_sc", overwrite = TRUE)
spark_disconnect()
spark_disconnect(sc)
sc <- spark_connect(master="local", config =  sparkConf)
flights_r <- copy_to(sc, flights, "flights_sc", overwrite = TRUE)
flights_r <- copy_to(sc, flights, "flights_sc", overwrite = TRUE)
library(nycflights13)
library(dplyr)
library(ggplot2)
library(sparklyr)
sc = spark_connect(master="local", version = "2.0.0")
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
library(nycflights13)
library(dplyr)
library(ggplot2)
library(sparklyr)
spark_install(version = "2.0.0")
sc = spark_connect(master="local", version = "2.0.0")
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
Sys.unsetenv("SPARK_HOME")
spark_disconnect(sc)
sc = spark_connect(master="local", version = "2.0.0")
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
sc = spark_connect(master="local", version = "2.0.0")
library(nycflights13)
library(dplyr)
library(ggplot2)
library(sparklyr)
sc = spark_connect(master="local", version = "2.0.0")
flights_r <- copy_to(sc, flights, "flights_sc" , overwrite = TRUE)
setwd("~/UNI/MASTEAM/1B1/BIGDATA/VoiceRecognition/TestAlgorithms")
# load the library
library(caret)
library(doParallel)
set.seed(1)
t <- proc.time()
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
features = 21
# Prepare train data
digits_csv <- read.csv("./voice.csv", head = FALSE)
train_data <- digits_csv[,-features]
train_labels <- as.factor(digits_csv[, features])
# Prepare test data
test_csv <- read.csv("./test.csv", head = FALSE)
test_data <- test_csv[, -features]
test_labels <- as.factor(test_csv[, features])
fitControl <- trainControl(method = "cv",
number = 10)
# Train the model
model <- train(train_data, train_labels,
trControl = fitControl,
method = "knn")
print.train(model)
plot.train(model)
#partGrid <- expand.grid(cp = (0:10)*0.01)
#knnGrid <- expand.grid(k = 1:5)
#grid <- expand.grid(k= 1:5, cp = (0:5)*0.1)
# Predict values
predictions <- predict(model, test_data)
# print results
output <- data.frame(PREDICT=predictions, LABEL=test_labels,
HIT=predictions==test_labels)
head(output)
# summarize results
res <- confusionMatrix(predictions, test_labels)
res
res$overall["Accuracy"]
proc.time()-t
# Other result
model$results
max(model$results$Accuracy)
# load the library
library(caret)
library(doParallel)
set.seed(1)
t <- proc.time()
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
features = 21
# Prepare train data
digits_csv <- read.csv("./voice.csv", head = FALSE)
train_data <- digits_csv[,-features]
train_labels <- as.factor(digits_csv[, features])
# Prepare test data
test_csv <- read.csv("./test.csv", head = FALSE)
test_data <- test_csv[, -features]
test_labels <- as.factor(test_csv[, features])
fitControl <- trainControl(method = "cv",
number = 10)
# Train the model
model <- train(train_data, train_labels,
trControl = fitControl,
method = "nb")
print.train(model)
plot.train(model)
#partGrid <- expand.grid(cp = (0:10)*0.01)
#knnGrid <- expand.grid(k = 1:5)
#grid <- expand.grid(k= 1:5, cp = (0:5)*0.1)
# Predict values
predictions <- predict(model, test_data)
# print results
output <- data.frame(PREDICT=predictions, LABEL=test_labels,
HIT=predictions==test_labels)
head(output)
# summarize results
res <- confusionMatrix(predictions, test_labels)
res
res$overall["Accuracy"]
proc.time()-t
# Other result
model$results
max(model$results$Accuracy)
model <- train(train_data, train_labels,
trControl = fitControl,
method = "nb")
print.train(model)
plot.train(model)
predictions <- predict(model, test_data)
predictions <- predict(model, test_data)
predictions <- predict(model, test_data)
View(digits_csv)
test_csv <- read.csv("./test.csv", head = FALSE)
test_data <- test_csv[, -features]
test_labels <- as.factor(test_csv[, features])
predictions <- predict(model, test_data)
test_labels <- as.factor(test_csv[, features])
fitControl <- trainControl(method = "cv",
number = 10)
model <- train(train_data, train_labels,
trControl = fitControl,
method = "nb")
print.train(model)
plot.train(model)
predictions <- predict(model, test_data)
output <- data.frame(PREDICT=predictions, LABEL=test_labels,
HIT=predictions==test_labels)
head(output)
res <- confusionMatrix(predictions, test_labels)
res
res$overall["Accuracy"]
proc.time()-t
model$results
max(model$results$Accuracy)
predictions <- predict(model, test_data)
predictions <- predict(model, test_data)
library(caret)
library(doParallel)
set.seed(1)
t <- proc.time()
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
features = 21
digits_csv <- read.csv("./voice.csv", head = FALSE)
train_data <- digits_csv[,-features]
train_labels <- as.factor(digits_csv[, features])
test_csv <- read.csv("./test.csv", head = FALSE)
test_data <- test_csv[, -features]
test_labels <- as.factor(test_csv[, features])
fitControl <- trainControl(method = "cv",
number = 10)
model <- train(train_data, train_labels,
trControl = fitControl,
method = "nb")
print.train(model)
plot.train(model)
predictions <- predict(model, test_data)
predictions <- predict(model, test_data)
# load the library
library(caret)
library(doParallel)
set.seed(1)
t <- proc.time()
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
features = 21
# Prepare train data
digits_csv <- read.csv("./voice.csv", head = TRUE)
train_data <- digits_csv[,-features]
train_labels <- as.factor(digits_csv[, features])
# Prepare test data
test_csv <- read.csv("./test.csv", head = TRUE)
test_data <- test_csv[, -features]
test_labels <- as.factor(test_csv[, features])
fitControl <- trainControl(method = "cv",
number = 10)
# Train the model
model <- train(train_data, train_labels,
trControl = fitControl,
method = "nb")
print.train(model)
plot.train(model)
#partGrid <- expand.grid(cp = (0:10)*0.01)
#knnGrid <- expand.grid(k = 1:5)
#grid <- expand.grid(k= 1:5, cp = (0:5)*0.1)
# Predict values
predictions <- predict(model, test_data)
# print results
output <- data.frame(PREDICT=predictions, LABEL=test_labels,
HIT=predictions==test_labels)
head(output)
# summarize results
res <- confusionMatrix(predictions, test_labels)
res
res$overall["Accuracy"]
proc.time()-t
# Other result
model$results
max(model$results$Accuracy)
predictions <- predict(model, test_data)
warnings()
output <- data.frame(PREDICT=predictions, LABEL=test_labels,
HIT=predictions==test_labels)
View(digits_csv)
View(digits_csv)
View(test_data)
View(test_data)
output <- data.frame(PREDICT=predictions, LABEL=test_labels,
HIT=predictions==test_labels)
head(output)
# load the library
library(caret)
library(doParallel)
set.seed(1)
t <- proc.time()
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
features = 21
# Prepare train data
digits_csv <- read.csv("./voice.csv", head = TRUE)
train_data <- digits_csv[,-features]
train_labels <- as.factor(digits_csv[, features])
# Prepare test data
test_csv <- read.csv("./test.csv", head = TRUE)
test_data <- test_csv[, -features]
test_labels <- as.factor(test_csv[, features])
fitControl <- trainControl(method = "cv",
number = 10)
# Train the model
model <- train(train_data, train_labels,
trControl = fitControl,
method = "knn")
print.train(model)
plot.train(model)
#partGrid <- expand.grid(cp = (0:10)*0.01)
#knnGrid <- expand.grid(k = 1:5)
#grid <- expand.grid(k= 1:5, cp = (0:5)*0.1)
# Predict values
predictions <- predict(model, test_data)
# print results
output <- data.frame(PREDICT=predictions, LABEL=test_labels,
HIT=predictions==test_labels)
head(output)
# summarize results
res <- confusionMatrix(predictions, test_labels)
res
res$overall["Accuracy"]
proc.time()-t
# Other result
model$results
max(model$results$Accuracy)
setwd("~/UNI/MASTEAM/1B1/BIGDATA/VoiceRecognition/FeatureExtraction")
#packages <- c('tuneR', 'seewave', 'gbm')
#if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
#  install.packages(setdiff(packages, rownames(installed.packages())))
#}
library(tuneR)
library(seewave)
library(gbm)
library(xgboost)
library(randomForest)
library(e1071)
bp <- c(0,22)
wl <- 2048
threshold <- 5
parallel <- 1
r <- tuneR::readWave("gerard.wav", from=0, units = "seconds")
b<- bp #in case bp its higher than can be due to sampling rate
if(b[2] > ceiling(r@samp.rate/2000) - 1) b[2] <- ceiling(r@samp.rate/2000) - 1
#frequency spectrum analysis
songspec <- seewave::spec(r, f = r@samp.rate, plot = FALSE)
analysis <- seewave::specprop(songspec, f = r@samp.rate, flim = c(0, 280/1000), plot = FALSE)
#save parameters
meanfreq <- analysis$mean/1000
sd <- analysis$sd/1000
median <- analysis$median/1000
Q25 <- analysis$Q25/1000
Q75 <- analysis$Q75/1000
IQR <- analysis$IQR/1000
skew <- analysis$skewness
kurt <- analysis$kurtosis
sp.ent <- analysis$sh
sfm <- analysis$sfm
mode <- analysis$mode/1000
centroid <- analysis$cent/1000
#Frequency with amplitude peaks
peakf <- 0#seewave::fpeaks(songspec, f = r@samp.rate, wl = wl, nmax = 3, plot = FALSE)[1, 1]
#Fundamental frequency parameters
ff <- seewave::fund(r, f = r@samp.rate, ovlp = 50, threshold = threshold,
fmax = 280, ylim=c(0, 280/1000), plot = FALSE, wl = wl)[, 2]
meanfun<-mean(ff, na.rm = T)
minfun<-min(ff, na.rm = T)
maxfun<-max(ff, na.rm = T)
#Dominant frecuency parameters
y <- seewave::dfreq(r, f = r@samp.rate, wl = wl, ylim=c(0, 280/1000), ovlp = 0, plot = F, threshold = threshold, bandpass = b * 1000, fftw = TRUE)[, 2]
meandom <- mean(y, na.rm = TRUE)
mindom <- min(y, na.rm = TRUE)
maxdom <- max(y, na.rm = TRUE)
dfrange <- (maxdom - mindom)
duration <- seewave::duration(wave = r, f = r@samp.rate)
#modulation index calculation
changes <- vector()
for(j in which(!is.na(y))){
change <- abs(y[j] - y[j + 1])
changes <- append(changes, change)
}
if(mindom==maxdom) modindx<-0 else modindx <- mean(changes, na.rm = T)/dfrange
wave <<- r
#save results
ret <- (c(meanfreq, sd, median, Q25, Q75, IQR, skew, kurt, sp.ent, sfm, mode,
centroid, peakf, meanfun, minfun, maxfun, meandom, mindom, maxdom, dfrange, modindx))
print(ret)
factor()
factor("male","female")
factor(1,"female", "male")
factor(1,labels=["female", "male"])
factor(1,labels=c("female", "male"))
factor("female",labels=c("female", "male"))
factor("female",labels="female", "male")
factor(c(1),labels=c("female", "male"))
factor(c(1,2),labels=c("female", "male"))
